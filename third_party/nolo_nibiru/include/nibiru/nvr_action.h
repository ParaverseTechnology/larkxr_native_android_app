//
// Created by Mark on 2018/9/12.
//

#ifndef NVRACTION_NVR_ACTION_H
#define NVRACTION_NVR_ACTION_H

#include <android/log.h>
#include <stdint.h>

#define NACT_LOG_TAG "nvr-action"
#define NACT_LOGI(...) __android_log_print(ANDROID_LOG_INFO, NACT_LOG_TAG, __VA_ARGS__)
#define NACT_LOGE(...) __android_log_print(ANDROID_LOG_ERROR, NACT_LOG_TAG, __VA_ARGS__)
#define NACT_LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, NACT_LOG_TAG, __VA_ARGS__)
#define NACT_LOGW(...) __android_log_print(ANDROID_LOG_WARN, NACT_LOG_TAG, __VA_ARGS__)

/**
 *  09-20 : 关于手柄目前仅支持NOLO和USB连接的手柄，蓝牙手柄暂不支持，后续会有支持
 *
 *
 *
 *
 *
 */

#define VERSION 100

enum NACTION_HEAD_TYPE {
	HEAD_NONE = 0, //无指定类型
	HEAD_NOLO_POS, //Nolo位移
	HEAD_NOLO_ROT_POS, //Nolo旋转+位移
	HEAD_INTEL_TM2_POS, //TM2 3DOF     @Deprecated
	HEAD_INTEL_TM2_ROT_POS, //TM2 6DOF @Deprecated
	HEAD_QUALCOM_ROT_POS, //高通6DOF
	HEAD_QUALCOM_ROT, //高通3DOF
	HEAD_VR9_ROT, //VR9 3DOF
	HEAD_GLOBAL_ROT, //全局Sensor=8
	HEAD_JNI_ROT, //Java获取Sensor数据调用tracker库融合=9
};

enum NACTION_CONTROLLER_TYPE {
	CONTROL_NONE = 0, //无指定类型
	CONTROL_6DOF, //6DOF手柄
	CONTROL_3DOF, //3DOF手柄
};

enum NACTION_HAND_TYPE {
	HAND_LEFT = 0, //左手
	HAND_RIGHT, //右手
	HEAD
};

enum NACTION_PRO_SDK {
	PRO_NONE = 0, PRO_SDK,
};

enum NACTION_CONNECT_STATE {
	DISCONNECT, CONNECT, CONNECTING, DISCONNECTING
};

enum NACTION_CONTROLLER_ACTION {
	TOUCH_NONE = -1, TOUCH_DOWN, TOUCH_UP, TOUCH_MOVE
};

struct NACTION_Info {
	NACTION_HEAD_TYPE head; //头部跟踪类型
	NACTION_CONTROLLER_TYPE leftController; //左手柄类型
	NACTION_CONTROLLER_TYPE rightController; //右手柄类型
	bool leftControllerConnect; //左手柄连接状态
	bool rightControllerConnect; //右手柄连接状态
};

struct NACTION_Device {
	int id;
	const char *name;
	int state; //0->未连接，1->已连接，2->正在连接，3->正在断开
	int pos; //0->左手，1->右手，2->头部
	NACTION_HEAD_TYPE headType; //只在pos==2时有用
	NACTION_CONTROLLER_TYPE controllerType; //只在pos!=2时有用
};

struct NACTION_Event {
	int id;
	int pos; //0->左手，1->右手，2->头部
	int event; //0->未连接，1->已连接，2->正在连接，3->正在断开
};

struct NACTION_Controller_Event {
	int id;
	int32_t keyState; //手柄按键状态表
	int action; //touch或motion状态 (action对应的就是0 1 2 down up move)
	float x; //touch或motion x轴
	float y; //touch或motion y轴
};

enum KEY_CODE {
	ACTION_MOVE = 2,
	ACTION_UP = 1,
	ACTION_DOWN = 0,
	KEYCODE_DPAD_UP = 19,
	KEYCODE_DPAD_DOWN = 20,
	KEYCODE_DPAD_LEFT = 21,
	KEYCODE_DPAD_RIGHT = 22,
	KEYCODE_DPAD_CENTER = 23,
	KEYCODE_VOLUME_UP = 24,
	KEYCODE_VOLUME_DOWN = 25,
	KEYCODE_BUTTON_Y = 100,
	KEYCODE_BUTTON_B = 97,
	KEYCODE_BUTTON_X = 99,
	KEYCODE_BUTTON_A = 96,
	KEYCODE_BUTTON_L1 = 102,
	KEYCODE_BUTTON_R1 = 103,
	KEYCODE_BUTTON_L2 = 104,
	KEYCODE_BUTTON_R2 = 105,
	KEYCODE_BUTTON_THUMBL = 106,
	KEYCODE_BUTTON_THUMBR = 107,
	KEYCODE_BUTTON_START = 108,
	KEYCODE_BUTTON_SELECT = 109,
	KEYCODE_BUTTON_NIBIRU = 110,
	KEYCODE_BUTTON_HOME = 3,
	KEYCODE_BUTTON_APP = 255,
	// NOLO
	KEYCODE_NOLO_TRIGGER = 103,
	KEYCODE_NOLO_TOUCH_PAD = 23,
	KEYCODE_NOLO_GRIP = 109,
	KEYCODE_NOLO_MENU = 110,
	KEYCODE_NOLO_BACK = 255
// NOLO
};

enum KEY_CODE_MASK {
	KEYCODE_DPAD_UP_MASK = 0x00000100,
	KEYCODE_DPAD_DOWN_MASK = 0x00000200,
	KEYCODE_DPAD_LEFT_MASK = 0x00000400,
	KEYCODE_DPAD_RIGHT_MASK = 0x00000800,
	KEYCODE_DPAD_CENTER_MASK = 0x00000001,
	KEYCODE_VOLUME_UP_MASK = 0x00000008,
	KEYCODE_VOLUME_DOWN_MASK = 0x00000004,
	KEYCODE_BUTTON_Y_MASK = 0x00008000,
	KEYCODE_BUTTON_B_MASK = 0x00002000,
	KEYCODE_BUTTON_X_MASK = 0x00004000,
	KEYCODE_BUTTON_A_MASK = 0x00001000,
	KEYCODE_BUTTON_L1_MASK = 0x00010000,
	KEYCODE_BUTTON_R1_MASK = 0x00040000,
	KEYCODE_BUTTON_L2_MASK = 0x00020000,
	KEYCODE_BUTTON_R2_MASK = 0x00080000,
	KEYCODE_BUTTON_THUMBL_MASK = 0x00100000,
	KEYCODE_BUTTON_THUMBR_MASK = 0x00200000,
	KEYCODE_BUTTON_START_MASK = 0x00400000,
	KEYCODE_BUTTON_SELECT_MASK = 0x00800000,
	KEYCODE_BUTTON_NIBIRU_MASK = 0x00000010,
	KEYCODE_BUTTON_HOME_MASK = 0x00000020,
	KEYCODE_BUTTON_APP_MASK = 0x00000002,
};

#endif //NVRACTION_NVR_ACTION_H
